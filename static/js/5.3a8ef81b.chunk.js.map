{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Common/FormsControls/FormsControls.module.css","components/Profile/Posts/Posts.module.css","components/Profile/Posts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Common/FormsControls/FormsControls.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Posts/Post/Post.tsx","components/Profile/Posts/AddPostForm/AddPostNewForm.tsx","components/Profile/Posts/Posts.tsx","components/Profile/Posts/PostsContainer.tsx","Redux/profile-selectors.ts","components/Profile/Profile.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onBlur","updateStatus","onChange","e","currentTarget","value","autoFocus","FormControl","meta","touched","error","children","hasError","className","style","formControl","Textarea","input","restProps","Input","createField","placeholder","name","component","validators","type","text","Field","validate","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","profile","onSubmit","errorStyle","formSummaryError","Object","keys","contacts","map","key","contact","ProfileData","isOwner","toEditMode","onClick","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","info","src","photos","large","userPhoto","picture","alt","target","files","length","initialValues","formData","then","Post","item","message","likes","PostFieldValidate","AddPostNewForm","React","memo","postText","values","setSubmitting","addPost","isSubmitting","disabled","PostsMemorized","postsElements","posts","post","likesCount","id","profileActions","PostsContainer","connect","state","Posts","getProfileSelector","getStatusSelector","Profile","useSelector","myId","getUserIdSelector","dispatch","useDispatch","history","useHistory","params","useParams","refreshProfile","userId","push","getUserProfile","getUserProfileDispatch","getUserStatus","getUserStatusDispatch","console","updateUserStatus","photo","Preloader"],"mappings":"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","file":"static/js/5.3a8ef81b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"picture\":\"ProfileInfo_picture__2dqFd\",\"info\":\"ProfileInfo_info__1Yp8A\",\"fullName\":\"ProfileInfo_fullName__2lhA9\",\"contact\":\"ProfileInfo_contact__1k5zQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__16E4F\",\"error\":\"FormsControls_error__1jxD_\",\"formSummaryError\":\"FormsControls_formSummaryError__182ys\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"Posts_posts__11wDi\",\"addPostButton\":\"Posts_addPostButton__36-5P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3z9fn\"};","import React, {useState, useEffect, ChangeEvent} from \"react\";\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks: React.FC<PropsType> = (props) => {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status]);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    };\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    };\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <span onDoubleClick={activateEditMode}><b>Status</b>: {props.status || 'No Status'}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div onBlur={deactivateEditMode}>\r\n                <input onChange={onStatusChange} autoFocus={true} value={status}/>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react';\r\nimport style from './FormsControls.module.css';\r\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\nimport {FieldValidatorType} from \"../../../utils/validators/validators\";\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error},children}) => {\r\n    const hasError = touched && error;\r\n    return (\r\n        <div className={style.formControl + ' ' + (hasError ? style.error : '')}>\r\n            {children}\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    //const {input, meta, child, ...restProps} = props;\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n};\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    //const {input, meta, child, ...restProps} = props;\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n};\r\n\r\nexport function createField<LoginFormValuesTypeKeys extends string>(placeholder: string | undefined,\r\n                            name: LoginFormValuesTypeKeys,\r\n                            component: React.FC<WrappedFieldProps>,\r\n                            validators: Array<FieldValidatorType> | null,\r\n                            type?: string,\r\n                            text = '') {\r\n    return (\r\n        <div>\r\n            <Field placeholder={placeholder}\r\n                   name={name}\r\n                   component={component}\r\n                   validate={validators}\r\n                   type={type}/>\r\n            {text}\r\n        </div>\r\n    )\r\n};","import React from 'react'\r\nimport style from './ProfileInfo.module.css';\r\nimport errorStyle from '../../Common/FormsControls/FormsControls.module.css'\r\nimport {createField, Input, Textarea} from '../../Common/FormsControls/FormsControls';\r\nimport {InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {ProfileType} from \"../../../types/types\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n}\r\ntype ProfileKeysType = Extract<keyof ProfileType, string>\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropsType> & PropsType> =\r\n    ({handleSubmit, profile, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <button>Save</button>\r\n            </div>\r\n            {error &&\r\n            <div className={errorStyle.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <b>Full name</b>: {createField<ProfileKeysType>\r\n            ('Full name', 'fullName', Input, [])}\r\n            </div>\r\n            <div>\r\n                <b>About me</b>: {createField<ProfileKeysType>\r\n            ('About me', 'aboutMe', Textarea, [])}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>: {createField<ProfileKeysType>\r\n            ('', 'lookingForAJob', Input, [], 'checkbox')}\r\n            </div>\r\n            <div>\r\n                <b>My professional\r\n                    skills</b>: {createField<ProfileKeysType>\r\n            ('My Professional skills', 'lookingForAJobDescription', Textarea, [])}\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>: {profile && Object.keys(profile.contacts).map(key => {\r\n                return (\r\n                    <div className={style.contact} key={key}>\r\n                        {/*Затипизировать!!!*/}\r\n                        <b>{key}</b>: {createField(key, `contacts.${key}`, Input, [])}\r\n                    </div>\r\n                )\r\n            })}\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({form: 'edit-profile'})(ProfileDataForm);\r\n\r\nexport default ProfileDataFormReduxForm;","import React, {useState} from 'react';\r\nimport style from './ProfileInfo.module.css';\r\nimport userPhoto from '../../../assets/images/userPhoto.png';\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\nimport {ContactsType, ProfileType} from \"../../../types/types\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (photo: File) => void\r\n    saveProfile: (profile: ProfileType) => any\r\n}\r\n\r\nconst ProfileInfo: React.FC<PropsType> = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    const onMainPhotoSelected = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        if(e.target.files?.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    };\r\n\r\n    const toEditMode = () => {\r\n        setEditMode(true)\r\n    };\r\n\r\n    const onSubmit = (formData: ProfileType) => {\r\n        saveProfile(formData)\r\n            .then(() => {\r\n                setEditMode(false)\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className={style.info}>\r\n            <img src={profile?.photos.large || userPhoto} className={style.picture} alt={'userPhoto'}/>\r\n            {isOwner && <input type={'file'} onChange={onMainPhotoSelected}/>}\r\n\r\n            {editMode\r\n                ? <ProfileDataForm initialValues={profile as ProfileType} onSubmit={onSubmit} profile={profile}/>\r\n                : <ProfileData profile={profile}\r\n                               isOwner={isOwner}\r\n                               toEditMode={toEditMode}/>}\r\n\r\n            <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n        </div>\r\n    )\r\n};\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType | null\r\n    isOwner: boolean\r\n    toEditMode: () => void\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataPropsType> = ({profile, isOwner, toEditMode}) => {\r\n    return (\r\n        <div>\r\n            {isOwner &&\r\n            <div>\r\n                <button onClick={toEditMode}>Edit</button>\r\n            </div>}\r\n            <div className={style.fullName}>\r\n                {profile?.fullName}\r\n            </div>\r\n            <div>\r\n                <b>About me</b>: {profile?.aboutMe || ' '}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>: {profile?.lookingForAJob ? 'yes' : 'no'}\r\n            </div>\r\n            <div>\r\n                <b>My profesional skills</b>: {profile?.lookingForAJobDescription}\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>: {profile && Object.keys(profile.contacts).map(key => {\r\n                return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]}/>\r\n            })}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\ntype ContactPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nconst Contact: React.FC<ContactPropsType> = ({contactTitle, contactValue}) => {\r\n    return (\r\n        <div className={style.contact}>\r\n            <b>{contactTitle}</b>: {contactValue}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport style from './Post.module.css';\r\nimport userPhoto from '../../../../assets/images/userPhoto.png';\r\n\r\ntype PropsType = {\r\n    message: string\r\n    likes: number\r\n    id: number\r\n}\r\n\r\nconst Post: React.FC<PropsType> = (props) => {\r\n    return (\r\n            <div className={style.item}>\r\n                <img src={userPhoto} alt={'userPhoto'}/>\r\n                {props.message}\r\n                <div>\r\n                    {props.likes} like\r\n                </div>\r\n            </div>\r\n    )\r\n};\r\n\r\nexport default Post;","import {ErrorMessage, Field, Form, Formik, FormikHelpers} from \"formik\";\r\nimport React from \"react\";\r\n\r\ntype PropsType = {\r\n    addPost: (postText: string) => void\r\n}\r\ntype FormType = {\r\n    postText: string\r\n}\r\n\r\nconst PostFieldValidate = (value: any) => {\r\n    let error;\r\n    if (!value) {\r\n        error = 'Required';\r\n    } else if (value.length > 100) {\r\n        error = 'Max length is 100 symbols';\r\n    }\r\n    return error;\r\n}\r\n\r\nlet AddPostNewForm: React.FC<PropsType> = React.memo((props) => {\r\n    const submit = (values: FormType, { setSubmitting }: FormikHelpers<FormType>) => {\r\n        props.addPost(values.postText)\r\n        setSubmitting(false)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={{postText: ''}}\r\n                onSubmit={submit}>\r\n                {({ isSubmitting}) => (\r\n                    <Form>\r\n                        <Field type=\"text\" name=\"postText\" placeholder={\"Write post\"} validate={PostFieldValidate}/>\r\n                        <ErrorMessage name={\"postText\"}/>\r\n                        <button type=\"submit\" disabled={isSubmitting}>\r\n                            Add Post\r\n                        </button>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default AddPostNewForm","import React from 'react';\r\nimport style from './Posts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport AddPostReduxForm, { NewPostFormValuesType } from \"./AddPostForm/AddPostForm\";\r\nimport {MapDispatchPropsType, MapStatePropsType} from \"./PostsContainer\";\r\nimport AddPostNewForm from \"./AddPostForm/AddPostNewForm\";\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst Posts: React.FC<PropsType> = (props) => {\r\n    let postsElements = props.posts\r\n        .map(post => <Post message={post.message} likes={post.likesCount} key={post.id} id={post.id}/>);\r\n\r\n    let onAddPost = (values: NewPostFormValuesType) => {\r\n        props.addPost(values.postText);\r\n    };\r\n\r\n    return (\r\n        <div className={style.posts}>\r\n            <AddPostNewForm addPost={props.addPost}/>\r\n           {/* <AddPostReduxForm />*/}\r\n            <div>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst PostsMemorized = React.memo(Posts);\r\n\r\nexport default PostsMemorized","import {profileActions} from \"../../../Redux/profile-reducer\";\r\nimport Posts from \"./Posts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../Redux/redux-store\";\r\nimport {PostType} from \"../../../types/types\";\r\n\r\nexport type MapStatePropsType = {\r\n    posts: Array<PostType>\r\n}\r\nexport type MapDispatchPropsType = {\r\n    addPost: (postText: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        posts: state.profile.posts\r\n    }\r\n};\r\n\r\nconst {addPost} = profileActions\r\n\r\nconst PostsContainer = connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>\r\n(mapStateToProps, {addPost})(Posts);\r\n\r\nexport default PostsContainer;","import {AppStateType} from \"./redux-store\";\r\n\r\nexport const getProfileSelector = (state: AppStateType) => {\r\n    return(\r\n        state.profile.profile\r\n    )\r\n};\r\n\r\nexport const getStatusSelector = (state: AppStateType) => {\r\n    return(\r\n        state.profile.status\r\n    )\r\n};\r\n\r\nexport const getLoginSelector = (state: AppStateType) => {\r\n    return(\r\n        state.auth.login\r\n    )\r\n};","import React, {useEffect} from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport PostsContainer from \"./Posts/PostsContainer\";\r\nimport Preloader from \"../Common/Preloader/Preloader\";\r\nimport { ProfileType } from '../../types/types';\r\nimport {getProfileSelector, getStatusSelector} from \"../../Redux/profile-selectors\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getUserIdSelector} from \"../../Redux/auth-selectors\";\r\nimport {getUserProfile, getUserStatus, savePhoto, saveProfile, updateUserStatus} from \"../../Redux/profile-reducer\";\r\nimport { useHistory, useParams } from 'react-router-dom';\r\n\r\ninterface ParamsInterface {\r\n    userId: string\r\n}\r\n\r\nconst Profile: React.FC = (props) => {\r\n    const profile = useSelector(getProfileSelector)\r\n    const status = useSelector(getStatusSelector)\r\n    const myId = useSelector(getUserIdSelector)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const getUserProfileDispatch = (userId: number) => dispatch(getUserProfile(userId))\r\n    const getUserStatusDispatch = (userId: number) => dispatch(getUserStatus(userId))\r\n    const updateStatus = (status: string) => dispatch(updateUserStatus(status))\r\n    const savePhotoDispatch = (photo: File) => dispatch(savePhoto(photo))\r\n    const saveProfileDispatch = (profile: ProfileType) => dispatch(saveProfile(profile))\r\n\r\n    let history = useHistory()\r\n    let params= useParams<ParamsInterface>()\r\n\r\n    const refreshProfile = () => {\r\n        let userId: number | null = +params.userId;\r\n        if(!userId) {\r\n            userId = myId;\r\n            if(!userId) {\r\n                history.push('/login')\r\n            }\r\n        }\r\n        if(!userId) {\r\n            console.error('ID should exist in URL params or in state (\"authorizedUserId\")')\r\n        } else {\r\n            getUserProfileDispatch(userId as number);\r\n            getUserStatusDispatch(userId as number)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        refreshProfile()\r\n    }, [params.userId])\r\n\r\n    if(!profile) {\r\n        return(\r\n            <Preloader/>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={profile}\r\n                         status={status}\r\n                         updateStatus={updateStatus}\r\n                         isOwner={!params.userId}\r\n                         savePhoto={savePhotoDispatch}\r\n                         saveProfile={saveProfileDispatch}/>\r\n            <PostsContainer />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Profile;"],"sourceRoot":""}