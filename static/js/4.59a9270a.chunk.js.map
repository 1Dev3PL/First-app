{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/Friends/Friends.module.css","components/Dialogs/Friends/Friend/Friend.module.css","components/Dialogs/Messages/Messages.module.css","components/Dialogs/Messages/Message/Message.module.css","components/Dialogs/Friends/Friend/Friend.tsx","components/Dialogs/Friends/Friends.tsx","components/Dialogs/Messages/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageNewForm.tsx","components/Dialogs/Messages/Messages.tsx","Redux/dialogs-selectors.ts","components/Dialogs/DialogsPage.tsx"],"names":["module","exports","Friend","props","className","style","friend","to","id","activeClassName","activeLink","name","Friends","friendsElements","friends","map","key","Message","message","MessageFieldValidate","value","error","length","AddMessageNewForm","React","memo","initialValues","onSubmit","values","setSubmitting","sendMessage","isSubmitting","type","placeholder","validate","disabled","Messages","messagesElements","messages","getFriendsSelector","state","dialogs","getMessagesSelector","DialogsPage","useSelector","dispatch","useDispatch","messageText","dialogsActions"],"mappings":"iGACAA,EAAOC,QAAU,CAAC,QAAU,2B,oBCA5BD,EAAOC,QAAU,CAAC,QAAU,2B,oBCA5BD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,WAAa,6B,oBCA/DD,EAAOC,QAAU,CAAC,SAAW,6B,oBCA7BD,EAAOC,QAAU,CAAC,QAAU,2B,0HCgBbC,EARqB,SAACC,GACjC,OACI,yBAAKC,UAAWC,IAAMC,QAClB,kBAAC,IAAD,CAASC,GAAI,YAAcJ,EAAMK,GAAIC,gBAAiBJ,IAAMK,YAAaP,EAAMQ,QCQ5EC,EAXsB,SAAC,GAAe,IAC7CC,EAD4C,EAAbC,QAE9BC,KAAI,SAAAT,GAAM,OAAI,kBAAC,EAAD,CAAQK,KAAML,EAAOK,KAAMK,IAAKV,EAAOE,GAAIA,GAAIF,EAAOE,QAEzE,OACI,yBAAKJ,UAAWC,IAAMS,SACjBD,I,oCCDEI,EANsB,SAACd,GAClC,OACI,yBAAKC,UAAWC,IAAMa,SAAUf,EAAMe,U,QCCxCC,EAAuB,SAACC,GAC1B,IAAIC,EAMJ,OALKD,EAEMA,EAAME,OAAS,MACtBD,EAAQ,6BAFRA,EAAQ,WAILA,GA4BIE,EAzB8BC,IAAMC,MAAK,SAACtB,GAMrD,OACI,6BACI,kBAAC,IAAD,CACIuB,cAAe,CAACR,QAAS,IACzBS,SATG,SAACC,EAAD,GAAmE,IAA9CC,EAA6C,EAA7CA,cAChC1B,EAAM2B,YAAYF,EAAOV,SACzBW,GAAc,MAQL,gBAAGE,EAAH,EAAGA,aAAH,OACG,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,OAAOrB,KAAK,UAAUsB,YAAa,gBAAiBC,SAAUf,IAC1E,kBAAC,IAAD,CAAcR,KAAM,YACpB,4BAAQqB,KAAK,SAASG,SAAUJ,GAAhC,gBCLTK,EAnBuB,SAACjC,GACnC,IAAIkC,EAAmBlC,EAAMmC,SACxBvB,KAAI,SAAAG,GAAO,OAAI,kBAAC,EAAD,CAASA,QAASA,EAAQA,QAASF,IAAKE,EAAQV,GAAIA,GAAIU,EAAQV,QAMpF,OACI,yBAAKJ,UAAWC,IAAMiC,UAClB,6BACKD,GAGL,kBAAC,EAAD,CAAmBP,YAAa3B,EAAM2B,gB,OCxBrCS,EAAqB,SAACC,GAC/B,OACIA,EAAMC,QAAQ3B,SAIT4B,EAAsB,SAACF,GAChC,OACIA,EAAMC,QAAQH,U,SCcPK,UAhBgB,WAC3B,IAAM7B,EAAU8B,YAAYL,GACtBD,EAAWM,YAAYF,GAEvBG,EAAWC,cAIjB,OACI,yBAAK1C,UAAWC,IAAMoC,SAClB,kBAAC,EAAD,CAAS3B,QAASA,IAClB,kBAAC,EAAD,CAAUwB,SAAUA,EAAUR,YALV,SAACiB,GAAD,OAAyBF,EAASG,IAAelB,YAAYiB","file":"static/js/4.59a9270a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__xxJGX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friends\":\"Friends_friends__2HUhg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friend\":\"Friend_friend__2h3fz\",\"activeLink\":\"Friend_activeLink__2HVIe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messages\":\"Messages_messages__O-ldN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__3jhgM\"};","import React from 'react';\r\nimport style from './Friend.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\nconst Friend: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={style.friend}>\r\n            <NavLink to={'/dialogs/' + props.id} activeClassName={style.activeLink}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Friend;","import React from 'react';\r\nimport style from './Friends.module.css';\r\nimport Friend from \"./Friend/Friend\";\r\nimport {FriendType} from \"../../../types/types\";\r\n\r\ntype PropsType = {\r\n    friends: Array<FriendType>\r\n}\r\n\r\nconst Friends: React.FC<PropsType> = ({friends}) => {\r\n    let friendsElements = friends\r\n        .map(friend => <Friend name={friend.name} key={friend.id} id={friend.id}/>);\r\n\r\n    return (\r\n        <div className={style.friends}>\r\n            {friendsElements}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Friends;","import React from 'react';\r\nimport style from './Message.module.css';\r\n\r\ntype PropsType = {\r\n    message: string\r\n    id: number\r\n}\r\n\r\nconst Message: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={style.message}>{props.message}</div>\r\n    )\r\n};\r\n\r\nexport default Message;","import {ErrorMessage, Field, Form, Formik, FormikHelpers} from \"formik\";\r\nimport React from \"react\";\r\nimport style from \"../Common/FormsControls/FormsControls.module.css\";\r\n\r\ntype PropsType = {\r\n    sendMessage: (messageText: string) => void\r\n}\r\ntype FormType = {\r\n    message: string\r\n}\r\n\r\nconst MessageFieldValidate = (value: any) => {\r\n    let error;\r\n    if (!value) {\r\n        error = 'Required';\r\n    } else if (value.length > 100) {\r\n        error = 'Max length is 100 symbols';\r\n    }\r\n    return error;\r\n}\r\n\r\nlet AddMessageNewForm: React.FC<PropsType> = React.memo((props) => {\r\n    const submit = (values: FormType, { setSubmitting }: FormikHelpers<FormType>) => {\r\n        props.sendMessage(values.message)\r\n        setSubmitting(false)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={{message: ''}}\r\n                onSubmit={submit}>\r\n                {({ isSubmitting}) => (\r\n                    <Form>\r\n                        <Field type=\"text\" name=\"message\" placeholder={\"Write message\"} validate={MessageFieldValidate}/>\r\n                        <ErrorMessage name={\"message\"}/>\r\n                        <button type=\"submit\" disabled={isSubmitting}>\r\n                            Send\r\n                        </button>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default AddMessageNewForm","import React from 'react';\r\nimport style from './Messages.module.css';\r\nimport Message from \"./Message/Message\";\r\nimport {MessageType} from \"../../../types/types\";\r\nimport AddMessageReduxForm, { NewMessageFormValuesType } from '../AddMessageForm/AddMessageForm';\r\nimport AddMessageNewForm from \"../AddMessageForm/AddMessageNewForm\";\r\n\r\ntype PropsType = {\r\n    messages: Array<MessageType>\r\n    sendMessage: (messageText: string) => void\r\n}\r\n\r\nconst Messages: React.FC<PropsType> = (props) => {\r\n    let messagesElements = props.messages\r\n        .map(message => <Message message={message.message} key={message.id} id={message.id}/>);\r\n\r\n    let onAddMessage = (values: NewMessageFormValuesType) => {\r\n        props.sendMessage(values.messageText);\r\n    };\r\n\r\n    return (\r\n        <div className={style.messages}>\r\n            <div>\r\n                {messagesElements}\r\n            </div>\r\n            {/*<AddMessageReduxForm onSubmit={onAddMessage}/>*/}\r\n            <AddMessageNewForm sendMessage={props.sendMessage}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Messages;","import {AppStateType} from \"./redux-store\";\r\n\r\nexport const getFriendsSelector = (state: AppStateType) => {\r\n    return(\r\n        state.dialogs.friends\r\n    )\r\n};\r\n\r\nexport const getMessagesSelector = (state: AppStateType) => {\r\n    return(\r\n        state.dialogs.messages\r\n    )\r\n};","import React from 'react';\r\nimport style from './Dialogs.module.css'\r\nimport Friends from \"./Friends/Friends\";\r\nimport Messages from \"./Messages/Messages\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getFriendsSelector, getMessagesSelector} from \"../../Redux/dialogs-selectors\";\r\nimport {dialogsActions} from \"../../Redux/dialogs-reducer\";\r\n\r\nconst DialogsPage: React.FC  = () => {\r\n    const friends = useSelector(getFriendsSelector)\r\n    const messages = useSelector(getMessagesSelector)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const sendMessageDispatch = (messageText: string) => dispatch(dialogsActions.sendMessage(messageText))\r\n\r\n    return (\r\n        <div className={style.dialogs}>\r\n            <Friends friends={friends}/>\r\n            <Messages messages={messages} sendMessage={sendMessageDispatch}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default DialogsPage;"],"sourceRoot":""}