{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/Posts/Posts.module.css","components/Profile/Posts/Post/Post.module.css","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Posts/Post/Post.tsx","components/Profile/Posts/AddPostForm/AddPostForm.tsx","components/Profile/Posts/Posts.tsx","components/Profile/Posts/PostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","prototype","toString","call","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","TypeError","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onBlur","updateStatus","onChange","e","currentTarget","autoFocus","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","profile","error","onSubmit","className","errorStyle","formSummaryError","createField","Input","Textarea","keys","contacts","map","key","style","contact","ProfileData","isOwner","toEditMode","onClick","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","info","src","photos","large","userPhoto","picture","alt","type","target","files","initialValues","formData","then","Post","item","message","likes","maxLength50","maxLengthCreator","AddPostReduxForm","required","addPostButton","PostsMemorized","React","memo","postsElements","posts","post","likesCount","id","values","addPost","postText","profileActions","PostsContainer","connect","state","Posts","Profile","Preloader","ProfileContainer","userId","this","match","params","myId","history","getUserProfile","getUserStatus","console","refreshProfile","prevProps","prevState","updateUserStatus","Component","compose","auth","isAuth","withRouter","withAuthRedirect"],"mappings":"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","file":"static/js/4.d5a6e84e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"picture\":\"ProfileInfo_picture__2dqFd\",\"info\":\"ProfileInfo_info__1Yp8A\",\"fullName\":\"ProfileInfo_fullName__2lhA9\",\"contact\":\"ProfileInfo_contact__1k5zQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"Posts_posts__11wDi\",\"addPostButton\":\"Posts_addPostButton__36-5P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3z9fn\"};","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}","import React, {useState, useEffect, ChangeEvent} from \"react\";\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks: React.FC<PropsType> = (props) => {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status]);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    };\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    };\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <span onDoubleClick={activateEditMode}><b>Status</b>: {props.status || 'No Status'}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div onBlur={deactivateEditMode}>\r\n                <input onChange={onStatusChange} autoFocus={true} value={status}/>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react'\r\nimport style from './ProfileInfo.module.css';\r\nimport errorStyle from '../../Common/FormsControls/FormsControls.module.css'\r\nimport {createField, Input, Textarea} from '../../Common/FormsControls/FormsControls';\r\nimport {InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {ProfileType} from \"../../../types/types\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n}\r\ntype ProfileKeysType = Extract<keyof ProfileType, string>\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropsType> & PropsType> =\r\n    ({handleSubmit, profile, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <button>Save</button>\r\n            </div>\r\n            {error &&\r\n            <div className={errorStyle.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <b>Full name</b>: {createField<ProfileKeysType>\r\n            ('Full name', 'fullName', Input, [])}\r\n            </div>\r\n            <div>\r\n                <b>About me</b>: {createField<ProfileKeysType>\r\n            ('About me', 'aboutMe', Textarea, [])}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>: {createField<ProfileKeysType>\r\n            ('', 'lookingForAJob', Input, [], 'checkbox')}\r\n            </div>\r\n            <div>\r\n                <b>My professional\r\n                    skills</b>: {createField<ProfileKeysType>\r\n            ('My Professional skills', 'lookingForAJobDescription', Textarea, [])}\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>: {profile && Object.keys(profile.contacts).map(key => {\r\n                return (\r\n                    <div className={style.contact} key={key}>\r\n                        {/*Затипизировать!!!*/}\r\n                        <b>{key}</b>: {createField(key, `contacts.${key}`, Input, [])}\r\n                    </div>\r\n                )\r\n            })}\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({form: 'edit-profile'})(ProfileDataForm);\r\n\r\nexport default ProfileDataFormReduxForm;","import React, {useState} from 'react';\r\nimport style from './ProfileInfo.module.css';\r\nimport userPhoto from '../../../assets/images/userPhoto.png';\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\nimport {PropsType} from \"../Profile\";\r\nimport {ContactsType, ProfileType} from \"../../../types/types\";\r\n\r\nconst ProfileInfo: React.FC<PropsType> = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    const onMainPhotoSelected = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        if(e.target.files?.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    };\r\n\r\n    const toEditMode = () => {\r\n        setEditMode(true)\r\n    };\r\n\r\n    const onSubmit = (formData: ProfileType) => {\r\n        saveProfile(formData)\r\n            .then(() => {\r\n                setEditMode(false)\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className={style.info}>\r\n            <img src={profile?.photos.large || userPhoto} className={style.picture} alt={'userPhoto'}/>\r\n            {isOwner && <input type={'file'} onChange={onMainPhotoSelected}/>}\r\n\r\n            {editMode\r\n                ? <ProfileDataForm initialValues={profile as ProfileType} onSubmit={onSubmit} profile={profile}/>\r\n                : <ProfileData profile={profile}\r\n                               isOwner={isOwner}\r\n                               toEditMode={toEditMode}/>}\r\n\r\n            <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n        </div>\r\n    )\r\n};\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType | null\r\n    isOwner: boolean\r\n    toEditMode: () => void\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataPropsType> = ({profile, isOwner, toEditMode}) => {\r\n    return (\r\n        <div>\r\n            {isOwner &&\r\n            <div>\r\n                <button onClick={toEditMode}>Edit</button>\r\n            </div>}\r\n            <div className={style.fullName}>\r\n                {profile?.fullName}\r\n            </div>\r\n            <div>\r\n                <b>About me</b>: {profile?.aboutMe || ' '}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>: {profile?.lookingForAJob ? 'yes' : 'no'}\r\n            </div>\r\n            <div>\r\n                <b>My profesional skills</b>: {profile?.lookingForAJobDescription}\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>: {profile && Object.keys(profile.contacts).map(key => {\r\n                return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]}/>\r\n            })}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\ntype ContactPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nconst Contact: React.FC<ContactPropsType> = ({contactTitle, contactValue}) => {\r\n    return (\r\n        <div className={style.contact}>\r\n            <b>{contactTitle}</b>: {contactValue}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport style from './Post.module.css';\r\nimport userPhoto from '../../../../assets/images/userPhoto.png';\r\n\r\ntype PropsType = {\r\n    message: string\r\n    likes: number\r\n    id: number\r\n}\r\n\r\nconst Post: React.FC<PropsType> = (props) => {\r\n    return (\r\n            <div className={style.item}>\r\n                <img src={userPhoto} alt={'userPhoto'}/>\r\n                {props.message}\r\n                <div>\r\n                    {props.likes} like\r\n                </div>\r\n            </div>\r\n    )\r\n};\r\n\r\nexport default Post;","import {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, Textarea} from \"../../../Common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../../../utils/validators/validators\";\r\nimport style from \"../Posts.module.css\";\r\nimport React from \"react\";\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nexport type NewPostFormValuesType = {\r\n    postText: string\r\n}\r\ntype NewPostFormValuesKeysType = Extract<keyof NewPostFormValuesType, string>\r\ntype PropsType = {}\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps<NewPostFormValuesType, PropsType> & PropsType> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<NewPostFormValuesKeysType>\r\n                ('Write post', 'postText', Textarea, [required, maxLength50])}\r\n            </div>\r\n            <div>\r\n                <button className={style.addPostButton}>Add Post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\nconst AddPostReduxForm = reduxForm<NewPostFormValuesType, PropsType>({form: 'addPost'})(AddPostForm);\r\n\r\nexport default AddPostReduxForm","import React from 'react';\r\nimport style from './Posts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport AddPostReduxForm, { NewPostFormValuesType } from \"./AddPostForm/AddPostForm\";\r\nimport {MapDispatchPropsType, MapStatePropsType} from \"./PostsContainer\";\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst Posts: React.FC<PropsType> = (props) => {\r\n    let postsElements = props.posts\r\n        .map(post => <Post message={post.message} likes={post.likesCount} key={post.id} id={post.id}/>);\r\n\r\n    let onAddPost = (values: NewPostFormValuesType) => {\r\n        props.addPost(values.postText);\r\n    };\r\n\r\n    return (\r\n        <div className={style.posts}>\r\n            <AddPostReduxForm onSubmit={onAddPost}/>\r\n            <div>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst PostsMemorized = React.memo(Posts);\r\n\r\nexport default PostsMemorized","import {profileActions} from \"../../../Redux/profile-reducer\";\r\nimport Posts from \"./Posts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../Redux/redux-store\";\r\nimport {PostType} from \"../../../types/types\";\r\n\r\nexport type MapStatePropsType = {\r\n    posts: Array<PostType>\r\n}\r\nexport type MapDispatchPropsType = {\r\n    addPost: (postText: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        posts: state.profile.posts\r\n    }\r\n};\r\n\r\nconst {addPost} = profileActions\r\n\r\nconst PostsContainer = connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>\r\n(mapStateToProps, {addPost})(Posts);\r\n\r\nexport default PostsContainer;","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport PostsContainer from \"./Posts/PostsContainer\";\r\nimport Preloader from \"../Common/Preloader/Preloader\";\r\nimport { ProfileType } from '../../types/types';\r\n\r\nexport type PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (photo: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst Profile: React.FC<PropsType> = (props) => {\r\n    if(!props.profile) {\r\n        return(\r\n            <Preloader/>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile}\r\n                         status={props.status}\r\n                         updateStatus={props.updateStatus}\r\n                         isOwner={props.isOwner}\r\n                         savePhoto={props.savePhoto}\r\n                         saveProfile={props.saveProfile}/>\r\n            <PostsContainer />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getUserProfile, getUserStatus, savePhoto, saveProfile, updateUserStatus} from \"../../Redux/profile-reducer\";\r\nimport {withRouter, RouteComponentProps} from \"react-router-dom\";\r\nimport withAuthRedirect from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport { ProfileType } from '../../types/types';\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\ntype MapStatePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    myId: number | null\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getUserStatus: (userId: number) => void\r\n    updateUserStatus: (status: string) => void\r\n    savePhoto: (photo: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType & RouteComponentProps<PathParamsType>\r\n\r\nclass ProfileContainer extends React.Component<PropsType>{\r\n    refreshProfile () {\r\n        let userId: number | null = +this.props.match.params.userId;\r\n        if(!userId) {\r\n            userId = this.props.myId;\r\n            if(!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        if(!userId) {\r\n            console.error('ID should exist in URL params or in state (\"authorizedUserId\")')\r\n        } else {\r\n            this.props.getUserProfile(userId as number);\r\n            this.props.getUserStatus(userId as number)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropsType, prevState: MapStatePropsType) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {}\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile {...this.props}\r\n                         profile={this.props.profile}\r\n                         status={this.props.status}\r\n                         updateStatus={this.props.updateUserStatus}\r\n                         isOwner={!this.props.match.params.userId}\r\n                         savePhoto={this.props.savePhoto}\r\n                         saveProfile={this.props.saveProfile}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        profile: state.profile.profile,\r\n        status: state.profile.status,\r\n        myId: state.auth.userId,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n};\r\n\r\n//const { } =\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect/*<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>*/\r\n    (mapStateToProps, {getUserProfile, getUserStatus, updateUserStatus, savePhoto, saveProfile}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer);\r\n"],"sourceRoot":""}